// cssGen is a temporary code generator for the myitcv.io/react.CSS type
//
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"
	"text/template"

	"myitcv.io/gogenerate"
)

// using
// https://github.com/Microsoft/TypeScript/blob/8b9fa4ce7420fdf2f540300dc80fa91f5b89ea93/lib/lib.dom.d.ts#L1692
// as a reference
//
var attrs = map[string]typ{
	"Float":     typ{"float", "string"},
	"FontSize":  typ{"fontSize", "string"},
	"FontStyle": typ{"fontStyle", "string"},
	"Height":    typ{"height", "string"},
	"MaxHeight": typ{"maxHeight", "string"},
	"MarginTop": typ{"marginTop", "string"},
	"OverflowY": typ{"overflowY", "string"},
	"MinHeight": typ{"minHeight", "string"},
	"Overflow":  typ{"overflow", "string"},
	"Resize":    typ{"resize", "string"},
	"Width":     typ{"width", "string"},
	"Position":  typ{"position", "string"},
	"Top":       typ{"top", "string"},
	"Left":      typ{"left", "string"},
	"ZIndex":    typ{"zIndex", "string"},
}

const (
	cssGenCmd = "cssGen"
)

func main() {
	log.SetFlags(0)
	log.SetPrefix(cssGenCmd + ": ")

	flag.Parse()

	wd, err := os.Getwd()
	if err != nil {
		fatalf("unable to get working directory: %v", err)
	}

	envFileName, ok := os.LookupEnv(gogenerate.GOFILE)
	if !ok {
		fatalf("env not correct; missing %v", gogenerate.GOFILE)
	}

	fp := filepath.Join(wd, envFileName)

	ofName, ok := gogenerate.NameFileFromFile(fp, cssGenCmd)
	if !ok {
		fatalf("could not generate generated filename from %q (with cmd %q)", envFileName, cssGenCmd)
	}

	buf := bytes.NewBuffer(nil)

	t, err := template.New("t").Parse(tmpl)
	if err != nil {
		fatalf("could not parse template: %v", err)
	}

	err = t.Execute(buf, attrs)
	if err != nil {
		fatalf("could not execute template: %v", err)
	}

	toWrite := buf.Bytes()
	out, err := format.Source(toWrite)
	if err == nil {
		toWrite = out
	}

	_, err = gogenerate.WriteIfDiff(toWrite, ofName)
	if err != nil {
		fatalf("could not write %v: %v", ofName, err)
	}
}

type typ struct {
	Attr string
	Type string
}

var tmpl = `
 // Code generated by cssGen. DO NOT EDIT.

package react

import "github.com/gopherjs/gopherjs/js"

// CSS defines CSS attributes for HTML components. Largely based on
// https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
//
type CSS struct {
	o *js.Object

	{{range $k, $v := . }}
	{{$k}} {{$v.Type}}
	{{- end}}
}

// TODO: until we have a resolution on
// https://github.com/gopherjs/gopherjs/issues/236 we define hack() below

func (c *CSS) hack() *CSS {
	if c == nil {
		return nil
	}

	o := object.New()

	{{range $k, $v := . }}
	o.Set("{{$v.Attr}}", c.{{$k}})
	{{- end}}

	return &CSS{o: o}
}
`

func fatalf(format string, args ...interface{}) {
	panic(fmt.Errorf(format, args...))
}
